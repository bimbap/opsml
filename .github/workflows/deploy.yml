name: CI/CD to AWS EKS on Main Branch

on:
  push:
    tags:
      - 'v*'   # Trigger hanya saat push tag seperti v1.0.0, v2.1.3, dll

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Define Image Variables
        run: |
          echo "Checking ECR Repository..."
          if [ -z "${{ env.ECR_REPOSITORY_NAME }}" ]; then
            echo "ERROR: ECR_REPOSITORY is empty! Please check the Github Secrets."
            exit 1
          fi
          IMAGE_TAG=${{ github.sha }}
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Debug Image Variables
        run: |
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY_NAME: $ECR_REPOSITORY_NAME"
          echo "IMAGE_TAG: $IMAGE_TAG"
          echo "IMAGE_URI: $IMAGE_URI"

      - name: Build, tag, and push image to ECR
        id: build-image
        run: |
          docker build -t $IMAGE_URI .
          docker tag $IMAGE_URI $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest
          docker push $IMAGE_URI
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest

  setup:
    name: Configure kubeconfig for EKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

            - name: Delete old Kubernetes resources
              run: |
                  # Check if pods exists
                  kubectl get pods

                  # Delete existing resources
                  kubectl delete --ignore-not-found=true deploy.yaml
                  kubectl delete --ignore-not-found=true service.yaml

      - name: Deploy new version to EKS
        run: |
            # Apply all manifests using kustomize
            cd kubernetes
            kubectl apply -k .

            # Wait for deployment to be ready
            kubectl rollout status deploy.yaml --timeout=300s

      - name: Display Service URL
        run: |
            echo "Waiting for LoadBalancer to be ready..."
            # Give AWS some time to provision the load balancer
            sleep 30

            # Get the external IP/hostname
            EXTERNAL_IP=$(kubectl get service opsml-service -n opsml-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

            echo "Application deployed successfully!"
            echo "It may take a few minutes for the LoadBalancer to be fully operational"
            echo "Service URL: http://${EXTERNAL_IP}"